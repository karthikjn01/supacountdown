/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as LobbySessionIdIndexImport } from './routes/lobby/$sessionId/index'
import { Route as LobbySessionIdFinishedImport } from './routes/lobby/$sessionId/finished'
import { Route as LobbySessionIdLeaderIndexImport } from './routes/lobby/$sessionId/leader/index'
import { Route as LobbySessionIdUserUserIdIndexImport } from './routes/lobby/$sessionId/user/$userId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LobbySessionIdIndexRoute = LobbySessionIdIndexImport.update({
  id: '/lobby/$sessionId/',
  path: '/lobby/$sessionId/',
  getParentRoute: () => rootRoute,
} as any)

const LobbySessionIdFinishedRoute = LobbySessionIdFinishedImport.update({
  id: '/lobby/$sessionId/finished',
  path: '/lobby/$sessionId/finished',
  getParentRoute: () => rootRoute,
} as any)

const LobbySessionIdLeaderIndexRoute = LobbySessionIdLeaderIndexImport.update({
  id: '/lobby/$sessionId/leader/',
  path: '/lobby/$sessionId/leader/',
  getParentRoute: () => rootRoute,
} as any)

const LobbySessionIdUserUserIdIndexRoute =
  LobbySessionIdUserUserIdIndexImport.update({
    id: '/lobby/$sessionId/user/$userId/',
    path: '/lobby/$sessionId/user/$userId/',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/lobby/$sessionId/finished': {
      id: '/lobby/$sessionId/finished'
      path: '/lobby/$sessionId/finished'
      fullPath: '/lobby/$sessionId/finished'
      preLoaderRoute: typeof LobbySessionIdFinishedImport
      parentRoute: typeof rootRoute
    }
    '/lobby/$sessionId/': {
      id: '/lobby/$sessionId/'
      path: '/lobby/$sessionId'
      fullPath: '/lobby/$sessionId'
      preLoaderRoute: typeof LobbySessionIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/lobby/$sessionId/leader/': {
      id: '/lobby/$sessionId/leader/'
      path: '/lobby/$sessionId/leader'
      fullPath: '/lobby/$sessionId/leader'
      preLoaderRoute: typeof LobbySessionIdLeaderIndexImport
      parentRoute: typeof rootRoute
    }
    '/lobby/$sessionId/user/$userId/': {
      id: '/lobby/$sessionId/user/$userId/'
      path: '/lobby/$sessionId/user/$userId'
      fullPath: '/lobby/$sessionId/user/$userId'
      preLoaderRoute: typeof LobbySessionIdUserUserIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/lobby/$sessionId/finished': typeof LobbySessionIdFinishedRoute
  '/lobby/$sessionId': typeof LobbySessionIdIndexRoute
  '/lobby/$sessionId/leader': typeof LobbySessionIdLeaderIndexRoute
  '/lobby/$sessionId/user/$userId': typeof LobbySessionIdUserUserIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/lobby/$sessionId/finished': typeof LobbySessionIdFinishedRoute
  '/lobby/$sessionId': typeof LobbySessionIdIndexRoute
  '/lobby/$sessionId/leader': typeof LobbySessionIdLeaderIndexRoute
  '/lobby/$sessionId/user/$userId': typeof LobbySessionIdUserUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/lobby/$sessionId/finished': typeof LobbySessionIdFinishedRoute
  '/lobby/$sessionId/': typeof LobbySessionIdIndexRoute
  '/lobby/$sessionId/leader/': typeof LobbySessionIdLeaderIndexRoute
  '/lobby/$sessionId/user/$userId/': typeof LobbySessionIdUserUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/lobby/$sessionId/finished'
    | '/lobby/$sessionId'
    | '/lobby/$sessionId/leader'
    | '/lobby/$sessionId/user/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/lobby/$sessionId/finished'
    | '/lobby/$sessionId'
    | '/lobby/$sessionId/leader'
    | '/lobby/$sessionId/user/$userId'
  id:
    | '__root__'
    | '/'
    | '/lobby/$sessionId/finished'
    | '/lobby/$sessionId/'
    | '/lobby/$sessionId/leader/'
    | '/lobby/$sessionId/user/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LobbySessionIdFinishedRoute: typeof LobbySessionIdFinishedRoute
  LobbySessionIdIndexRoute: typeof LobbySessionIdIndexRoute
  LobbySessionIdLeaderIndexRoute: typeof LobbySessionIdLeaderIndexRoute
  LobbySessionIdUserUserIdIndexRoute: typeof LobbySessionIdUserUserIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LobbySessionIdFinishedRoute: LobbySessionIdFinishedRoute,
  LobbySessionIdIndexRoute: LobbySessionIdIndexRoute,
  LobbySessionIdLeaderIndexRoute: LobbySessionIdLeaderIndexRoute,
  LobbySessionIdUserUserIdIndexRoute: LobbySessionIdUserUserIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/lobby/$sessionId/finished",
        "/lobby/$sessionId/",
        "/lobby/$sessionId/leader/",
        "/lobby/$sessionId/user/$userId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/lobby/$sessionId/finished": {
      "filePath": "lobby/$sessionId/finished.tsx"
    },
    "/lobby/$sessionId/": {
      "filePath": "lobby/$sessionId/index.tsx"
    },
    "/lobby/$sessionId/leader/": {
      "filePath": "lobby/$sessionId/leader/index.tsx"
    },
    "/lobby/$sessionId/user/$userId/": {
      "filePath": "lobby/$sessionId/user/$userId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
